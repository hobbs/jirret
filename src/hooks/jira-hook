#!/usr/bin/python2
# -*- coding:utf-8 -*-
import sys
import ConfigParser
import commands
import re
import getopt
import os.path
import logging
from jira import JIRA

# Config file path
config_path = os.path.dirname(__file__) + '/jira-hook.config'
log_path = os.path.dirname(__file__) + '/hooks.log'
config = ConfigParser.RawConfigParser()
config.read(config_path)

FORMAT = '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
logging.basicConfig(format=FORMAT, filename=log_path, level=logging.DEBUG)

# Get config info from ./jira-hook.config
user = config.get('jira', 'user')
password = config.get('jira', 'pass')
url = config.get('jira', 'url')
gerrit_cmd = config.get('jira', 'gerritcmd')
custom_field = config.get('jira', 'custom_field')

use_trackingid_option = ('jira', 'use_trackingid')
use_trackingid = config.get(*use_trackingid_option).lower() == 'true' \
    if config.has_option(*use_trackingid_option) else False

enable_quotes_option = ('jira', 'enable_quotes')
enable_quotes = config.get(*enable_quotes_option).lower() == 'true' \
    if config.has_option(*enable_quotes_option) else True

jira = JIRA(url, basic_auth=(user, password), logging=True, )

# If no args, show usage info.
def show_usage():
    print '\nNormal hook usage: ' + sys.argv[0] + ' --action [new|merged|abandoned] --change <change id> --commit <git hash> --change-url <url to change> --branch <branch name>'
    print '\nTo automatically update projects list in config: ' + sys.argv[0] + ' update-projects'


"""
# Old Code, waiting to be fixed.
def updateProjects():
    projects = rpc.jira1.getProjectsNoSchemes(auth)
    s = ''
    for p in projects:
        s += p['key'] + ','

    s = s.rstrip(',')
    config.set('jira', 'projects', s)

    with open(config_path, 'wb') as configfile:
        config.write(configfile)
        
    print '\nAdded "' + s + '" to ' + config_path + '\n'
"""

def make_comment_message(what, id, hash, url, who, branch, subject, gerrit_prj, ):
    """Make commment message. Not send http request yet."""
    template = """
    {flag} {who} {summary}: {url}
    {{quote}}
    Subject: *{subject}*
    Project: {project} 
    Branch: {branch} 
    ChangeId: {change_id} 
    Commit: {commit_id} 
    {{quote}}

    {{color:#cccccc}}Generated by Gerrit hooks{{color}}
    """
    flag = '(i)'
    if who.find('(') != -1:
        who = re.search('(.+)\s+\(.+\)', who).group(1)
        who = '[~' + who + ']'
    if what == 'new':
        summary = ' uploaded a new patchset: '
        status = 'pending'
    elif what == 'merged':
        flag = '(/)'
        summary = ' merged'
        status = 'merged'
    elif what == 'abandoned':
        summary = ' abandoned'
        status = 'abandoned'
    else:
        print 'Illegal argument, stopping: ' + what
        exit()
    return template.format(flag=flag, who=who, summary=summary, url=url, subject=subject, project=gerrit_prj, branch=branch, change_id=id, commit_id=hash, topic=branch)


def update_ticket(what, id, hash, url, who, branch,topic):
    status, out = commands.getstatusoutput(gerrit_cmd + ' query --format TEXT change:' + id + ' limit:1')
    logging.debug("[update_ticket] Running Gerrit Query Result:\n" + out)
    if (status != 0):
        print 'Could not run gerrit query command.\n' + out
        logging.error("Error, Could not run gerrit query command.\n" + out)
        exit()
    subject = re.search('subject: (.*)\n', out).group(1);
    # group(1)匹配最后一个,通过运行gerrit query返回的结果中，获取主题、gerrit项目名等信息
    logging.debug("[update_ticket] RE Searched Subject Result :" + subject)

    gerrit_prj = re.search('project: (.*)\n', out).group(1);
    logging.debug("[update_ticket] RE Searched Subject gerrit_prj :" + gerrit_prj)
    projects = config.get('jira', 'projects').split(',')

    issues = []
    # account issue.
    issue_needle = '(%s-[0-9]+)'
    issue_haystack = subject
    if use_trackingid:
        issue_needle = ' +id: +' + issue_needle
        issue_haystack = out

    for p in projects:
        # match <JIRA ISSUE KEY> from git commit msg. like <TEST-12>.
        matches = re.findall(issue_needle % p, issue_haystack)
        #logging.debug("[update_ticket] RE Matched JIRA Issue Key :" + matches)
        for m in matches:
            issues.append(m)

    if (len(issues) > 0):
        message = make_comment_message(what, id, hash, url, who, branch, subject, gerrit_prj)
        logging.debug("[update_ticket] Comment MSG Preview:\n" + message)
        for i in issues:
            logging.info('[update_ticket] Updating issue: ' + i)
            jira.add_comment(i, message)
            if len(custom_field) > 0:
                issue = jira.issue(i)
                issue.update(fields={'customfield_' + custom_field: [status]})
                updateStatus = commands.getstatusoutput(issue.update(fields={'customfield_' + custom_field: [status]}))
                logging.debug('[update_ticket] [Custom_field] Updating status : ' + updateStatus)

def run_test():
    """unit test, for message generate"""
    print 'running test'
    what = 'new'
    commit_id = 'Ieddc9185f6ec5ec2f454a65f1cc4620659e8a5f7'
    hash_id = 'Ieddc9185f6ec5ec2f454a65f1cc4620659e8a5f7'
    subject = 'refs HELLO-1'
    gerrit_prj = 'hello-world'
    message = make_comment_message(what, commit_id, hash_id, 'http://10.13.0.134:8083/81', 'san.zhang (san.zhang@qq.com)', 'master', subject, gerrit_prj)
    print message

def main():
    if (len(sys.argv) < 2):
        show_usage()
        exit()

    """
    if (sys.argv[1] == 'update-projects'):
        #updateProjects()
        exit()
         """
    if (sys.argv[1] == 'test'):
        run_test()
        exit()


    need = ['action=', 'change=', 'change-url=', 'commit=', 'project=', 'branch=', 'uploader=',
            'patchset=', 'abandoner=', 'reason=', 'submitter=', 'kind=', 'is-draft=', 'change-owner=','newrev=','topic=']
    optlist, args = getopt.getopt(sys.argv[1:], '', need)
    id = url = hash = who = topic =''

    logging.info("------------------------------Starting New Comment Operation------------------------------")
    for o, a in optlist:
        if o == '--change':
            id = a
            logging.debug("[DEBUG] Optlist Change-ID :" + id)
        elif o == '--change-url':
            url = a
            logging.debug("[DEBUG] Optlist Change-URL :" + url)
        elif o == '--commit':
            hash = a
            logging.debug("[DEBUG] Optlist Commit-ID(Hash) :" + hash)
        elif o == '--action':
            what = a
            logging.debug("[DEBUG] Optlist action :" + what)
        elif o == '--uploader':
            who = a
            logging.debug("[DEBUG] Optlist uploader(who) :" + who)
        elif o == '--submitter':
            who = a
            logging.debug("[DEBUG] Optlist submitter(who) :" + who)
        elif o == '--abandoner':
            who = a
            logging.debug("[DEBUG] Optlist abandoner(who) :" + who)
        elif o == '--branch':
            branch = a
            logging.debug("[DEBUG] Optlist branch :" + branch)
        elif o == '--topic':
            topic = a
            logging.debug("[DEBUG] Optlist topic :" + topic)

    if (len(what) > 0 and len(id) > 0):
        update_ticket(what, id, hash, url, who, branch, topic)
        logging.info("------------------------------Ending New Comment Operation------------------------------")
    else:
        show_usage()
        
if __name__ == '__main__':
    try:
        main()
    except Exception, e:
        logging.error(e)

#!/usr/bin/python2
import sys
import ConfigParser
import commands
import re
import getopt
import os.path
from jira import JIRA

# Config file path
config_path = os.path.dirname(__file__) + '/jira-hook.config'
config = ConfigParser.RawConfigParser()
config.read(config_path)

user = config.get('jira', 'user')
password = config.get('jira', 'pass')
url = config.get('jira', 'url')
gerrit_cmd = config.get('jira', 'gerritcmd')
custom_field = config.get('jira', 'custom_field')

use_trackingid_option = ('jira', 'use_trackingid')
use_trackingid = config.get(*use_trackingid_option).lower() == 'true' \
    if config.has_option(*use_trackingid_option) else False

enable_quotes_option = ('jira', 'enable_quotes')
enable_quotes = config.get(*enable_quotes_option).lower() == 'true' \
    if config.has_option(*enable_quotes_option) else True

jira = JIRA(url, basic_auth=(user, password))

def show_usage():
    print '\nNormal hook usage: ' + sys.argv[0] + ' --action [new|merged|abandoned] --change <change id> --commit <git hash> --change-url <url to change>'
    print '\nTo automatically update projects list in config: ' + sys.argv[0] + ' update-projects'

def updateProjects():
    projects = rpc.jira1.getProjectsNoSchemes(auth)
    s = ''
    for p in projects:
        s += p['key'] + ','

    s = s.rstrip(',')
    config.set('jira', 'projects', s)

    with open(config_path, 'wb') as configfile:
        config.write(configfile)
        
    print '\nAdded "' + s + '" to ' + config_path + '\n'

def make_comment_message(what, id, hash, url, who, branch, subject, gerrit_prj):
    """Make commment message. Not send http request yet."""

    template = """
    {flag} {who} {summary}: {url}
    {{quote}}
    Subject: *{subject}*
    Project: {project} 
    Branch: {branch} 
    ChangeId: {change_id} 
    Commit: {commit_id} 
    {{quote}}

    {{color:#cccccc}}Generated by Gerrit hooks{{color}}
    """
    flag = '(i)'
    if who.find('(') != -1:
        who = re.search('(.+)\s+\(.+\)', who).group(1)
        who = '[~' + who + ']'
    # return new_template.format(who=who)
    # message = who;
    if what == 'new':
        summary = ' uploaded a new patchset: '
        # message += ' uploaded a new patchset: '
        status = 'pending'
    elif what == 'merged':
        flag = '(/)'
        summary = ' merged'
        status = 'merged'
    elif what == 'abandoned':
        summary = ' abandoned'
    else:
        print 'Illegal argument, stopping: ' + what
        exit()
    return template.format(flag=flag, who=who, summary=summary, url=url, subject=subject, project=gerrit_prj, \
        branch=branch, change_id=id, commit_id=hash)


def update_ticket(what, id, hash, url, who, branch):
    status, out = commands.getstatusoutput(gerrit_cmd + ' query --format TEXT change:' + id + ' limit:1')
    if (status != 0):
        print 'Could not run gerrit query command.\n' + out
        exit()
    subject = re.search('subject: (.*)\n', out).group(1);
    gerrit_prj = re.search('project: (.*)\n', out).group(1);
    projects = config.get('jira', 'projects').split(',')

    issues = []
    print projects
    issue_needle = '(%s-[0-9]+)'
    issue_haystack = subject
    if use_trackingid:
        issue_needle = ' +id: +' + issue_needle
        issue_haystack = out
    for p in projects:
        print issues
        matches = re.findall(issue_needle % p, issue_haystack)
        print matches
        for m in matches:
            issues.append(m)
    print issues

    if (len(issues) > 0):
        message = make_comment_message(what, id, hash, url, who, branch, subject, gerrit_prj)
        print 'Issues: ' + str(issues)
        for i in issues:
            print 'Updating issue: ' + i
            jira.add_comment(i, message)
            if len(status) > 0 and len(custom_field) > 0:
                issue = jira.issue(i)
                issue.update(fields={'customfield_' + custom_field: [status]})
        

def run_test():
    """unit test"""
    print 'running test'
    what = 'new'
    commit_id = 'Ieddc9185f6ec5ec2f454a65f1cc4620659e8a5f7'
    hash_id = 'Ieddc9185f6ec5ec2f454a65f1cc4620659e8a5f7'
    subject = 'refs TUT-3'
    gerrit_prj = 'hello-world'
    message = make_comment_message(what, commit_id, hash_id, 'http://10.13.0.134:8083/81', 'rong.ru (rong.ru@dji.com)', 'master', subject, gerrit_prj)
    print message

def main():

    if (len(sys.argv) < 2):
        showUsage()
        exit()

    if (sys.argv[1] == 'update-projects'):
        updateProjects()
        exit()

    if (sys.argv[1] == 'test'):
        run_test()
        exit()

    need = ['action=', 'change=', 'change-url=', 'commit=', 'project=', 'branch=', 'uploader=',
            'patchset=', 'abandoner=', 'reason=', 'submitter=', 'kind=', 'is-draft=', 'change-owner=','newrev=']
    optlist, args = getopt.getopt(sys.argv[1:], '', need)
    id = url = hash = who = ''

    for o, a in optlist:
        if o == '--change': id = a
        elif o == '--change-url': url = a
        elif o == '--commit': hash = a
        elif o == '--action': what = a
        elif o == '--uploader': who = a
        elif o == '--submitter': who = a
        elif o == '--abandoner': who = a
        elif o == '--branch': branch = a

    if (len(what) > 0 and len(id) > 0):
        update_ticket(what, id, hash, url, who, branch)
    else:
        show_usage()
        
if __name__ == '__main__':
    main()

#!/usr/bin/python2
#
# Refer to the XML-RPC Javadoc to see what calls are available:
# http://docs.atlassian.com/software/jira/docs/api/rpc-jira-plugin/latest/com/atlassian/jira/rpc/xmlrpc/XmlRpcService.html
 
import xmlrpclib
import sys
import ConfigParser
import commands
import re
import getopt
import os.path
from jira import JIRA



# Config file path
config_path = os.path.expanduser('~/.jirretconfig')

config = ConfigParser.RawConfigParser()
config.read(config_path)

user = config.get('jira', 'user')
password = config.get('jira', 'pass')
url = config.get('jira', 'url')
gerrit_cmd = config.get('jira', 'gerritcmd')
custom_field = config.get('jira', 'custom_field')

use_trackingid_option = ('jira', 'use_trackingid')
use_trackingid = config.get(*use_trackingid_option).lower() == 'true' \
    if config.has_option(*use_trackingid_option) else False

enable_quotes_option = ('jira', 'enable_quotes')
enable_quotes = config.get(*enable_quotes_option).lower() == 'true' \
    if config.has_option(*enable_quotes_option) else True

jira = JIRA(url, basic_auth=(user, password))

def showUsage():
    print '\nNormal hook usage: ' + sys.argv[0] + ' --action [new|merged|abandoned] --change <change id> --commit <git hash> --change-url <url to change>'
    print '\nTo automatically update projects list in config: ' + sys.argv[0] + ' update-projects'

def updateProjects():
    projects = rpc.jira1.getProjectsNoSchemes(auth)
    s = ''
    for p in projects:
        s += p['key'] + ','

    s = s.rstrip(',')
    config.set('jira', 'projects', s)

    with open(config_path, 'wb') as configfile:
        config.write(configfile)
        
    print '\nAdded "' + s + '" to ' + config_path + '\n'

def updateTicket(what, id, hash, url, who, branch):
    status, out = commands.getstatusoutput(gerrit_cmd + ' query --format TEXT change:' + id + ' limit:1')
    if (status != 0):
        print 'Could not run gerrit query command.\n' + out
        exit()
    subject = re.search('subject: (.*)\n', out).group(1);
    gerrit_prj = re.search('project: (.*)\n', out).group(1);
    projects = config.get('jira', 'projects').split(',')

    issues = []
    print projects
    issue_needle = '(%s-[0-9]+)'
    issue_haystack = subject
    if use_trackingid:
        issue_needle = ' +id: +' + issue_needle
        issue_haystack = out
    for p in projects:
        print issues
        matches = re.findall(issue_needle % p, issue_haystack)
        print matches
        for m in matches:
            issues.append(m)
    print issues

    if (len(issues) > 0):
        message = who;
        if what == 'new':
            message += ' uploaded a new patchset: '
            status = 'pending'
        elif what == 'merged':
            message += ' merged: '
            status = 'merged'
        elif what == 'abandoned':
            message += ' abandonded: '
        else:
            print 'Illegal argument, stopping: ' + what
            exit()

        if (len(url) > 0):
            message += url
        if (enable_quotes):
            message += '{quote}'
        message += '\nSubject: ' + subject + '\n'
        message += 'Project: ' + gerrit_prj + '\n'
        message += 'Branch: ' + branch + '\n'
        message += 'ChangeId: ' + id + '\n'
        if (len(hash) > 0):
            message += 'Commit: ' + hash+ '\n'
        if (enable_quotes):
            message += '{quote}'

        print 'Issues: ' + str(issues)
        for i in issues:
            print 'updating issue: ' + i
            jira.add_comment(i, message)
            if len(status) > 0 and len(custom_field) > 0:
                print i
                issue = jira.issue(i)
                issue.update(fields={'customfield_' + custom_field: [status]})


def main():

    if (len(sys.argv) < 2):
        showUsage()
        exit()

    if (sys.argv[1] == 'update-projects'):
        updateProjects()
        exit()

    need = ['action=', 'change=', 'change-url=', 'commit=', 'project=', 'branch=', 'uploader=',
            'patchset=', 'abandoner=', 'reason=', 'submitter=']
    optlist, args = getopt.getopt(sys.argv[1:], '', need)
    id = url = hash = who = ''

    for o, a in optlist:
        if o == '--change': id = a
        elif o == '--change-url': url = a
        elif o == '--commit': hash = a
        elif o == '--action': what = a
        elif o == '--uploader': who = a
        elif o == '--submitter': who = a
        elif o == '--abandoner': who = a
        elif o == '--branch': branch = a

    if (len(what) > 0 and len(id) > 0):
        updateTicket(what, id, hash, url, who, branch)
    else:
        showUsage()
        
if __name__ == '__main__':
    main()
